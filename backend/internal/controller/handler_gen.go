// Package controller provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.0 DO NOT EDIT.
package controller

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Error Object representing an error
type Error struct {
	// Code Error code that identify of the error
	Code *int32 `json:"code,omitempty"`

	// Message Short description of the error
	Message *string `json:"message,omitempty"`
}

// Task Object representing a Task
type Task struct {
	// Completed indicates if a taks is completed or not
	Completed *bool `json:"completed,omitempty"`

	// Description description of the task
	Description string `json:"description"`

	// Id id of the taks
	Id *string `json:"id,omitempty"`
}

// TasksCreateJSONRequestBody defines body for TasksCreate for application/json ContentType.
type TasksCreateJSONRequestBody = Task

// TasksUpdateJSONRequestBody defines body for TasksUpdate for application/json ContentType.
type TasksUpdateJSONRequestBody = Task

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the list of all tasks
	// (GET /task)
	TasksGetAll(ctx echo.Context) error
	// Create a new task
	// (POST /task)
	TasksCreate(ctx echo.Context) error
	// Delete an existing task
	// (DELETE /task/{taskId})
	TasksDelete(ctx echo.Context, taskId string) error
	// Get a single task based on its id
	// (GET /task/{taskId})
	TaskGet(ctx echo.Context, taskId string) error
	// Update an existing task
	// (PUT /task/{taskId})
	TasksUpdate(ctx echo.Context, taskId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// TasksGetAll converts echo context to params.
func (w *ServerInterfaceWrapper) TasksGetAll(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TasksGetAll(ctx)
	return err
}

// TasksCreate converts echo context to params.
func (w *ServerInterfaceWrapper) TasksCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TasksCreate(ctx)
	return err
}

// TasksDelete converts echo context to params.
func (w *ServerInterfaceWrapper) TasksDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", ctx.Param("taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TasksDelete(ctx, taskId)
	return err
}

// TaskGet converts echo context to params.
func (w *ServerInterfaceWrapper) TaskGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", ctx.Param("taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TaskGet(ctx, taskId)
	return err
}

// TasksUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) TasksUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", ctx.Param("taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TasksUpdate(ctx, taskId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/task", wrapper.TasksGetAll)
	router.POST(baseURL+"/task", wrapper.TasksCreate)
	router.DELETE(baseURL+"/task/:taskId", wrapper.TasksDelete)
	router.GET(baseURL+"/task/:taskId", wrapper.TaskGet)
	router.PUT(baseURL+"/task/:taskId", wrapper.TasksUpdate)

}
